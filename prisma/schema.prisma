// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RawEvent {
  id               Int      @id @default(autoincrement())
  chain            String
  address          String
  blockHash        String
  blockNumber      Int
  data             String
  index            Int
  removed          Boolean
  topics           String
  transactionHash  String
  transactionIndex Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())

  @@index([transactionHash], name: "transactionHash")
}

model RawTransaction {
  id                   Int      @id @default(autoincrement())
  chain                String
  blockNumber          Int
  timestamp            BigInt
  hash                 String
  from                 String
  to                   String?
  value                String
  gasPrice             String?
  gasLimit             String?
  maxPriorityFeePerGas String?
  maxFeePerGas         String?
  data                 String?
  nonce                Int
  index                Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now())

  @@index([hash], name: "hash")
}

model Address {
  address String    @id // 0x123456...
  channel Channel[]
  Packet  Packet[]
  state   State[]
}

model Chain {
  id         String    @id // optimism-sepolia, base-sepolia...
  name       String
  type       String // testnet, mainnet...
  blocks     Block[]
  channel    Channel[]
  fromPacket Packet[]  @relation("FromChainId")
  toPacket   Packet[]  @relation("ToChainId")
  state      State[]
}

model Block {
  id        String    @id // optimism-sepolia.123456 or base-sepolia.123456
  chainId   String?
  number    Int // 123456
  hash      String // 0x123456...
  timestamp BigInt // 1234567890
  chain     Chain?    @relation(fields: [chainId], references: [id])
  channel   Channel[]
  state     State[]
  packet    Packet[]
}

// For example channel-10000 + channel-10001 will result in 2 channel pairs
model Channel {
  id                      String   @id // channel-10000
  counterpartyId          String?  @unique // as we may not know the other channel id yet during the creation of the channel
  chainId                 String? // as we may not know the chain id yet during the creation of the channel
  blockId                 String? // as we may not know the block id yet during the creation of the channel
  type                    String? // universal / custom
  client                  String? // optimism-sim / optimism-proof / base-sim / base-proof...
  portAddress             String?
  counterpartyPortId      String?
  counterpartyPortAddress String?
  connectionHops          String?
  txHash                  String?
  fromAddress             String?
  stage                   Int      @default(0)
  timestamp               BigInt
  from                    Address? @relation(fields: [fromAddress], references: [address])
  block                   Block?   @relation(fields: [blockId], references: [id])
  chain                   Chain?   @relation(fields: [chainId], references: [id])
  counterparty            Channel? @relation("ChannelCounterpartyId", fields: [counterpartyId], references: [id])
  channel                 Channel? @relation("ChannelCounterpartyId")
  fromPacket              Packet[] @relation("FromChannelId")
  toPacket                Packet[] @relation("ToChannelId")
  state                   State[]

  @@index([chainId], name: "chainId")
  @@index([type], name: "type")
  @@index([client], name: "client")
  @@index([portAddress], name: "portAddress")
  @@index([counterpartyPortAddress], name: "counterpartyPortAddress")
  @@index([fromAddress], name: "fromAddress")
}

model Packet {
  id               String   @id // channel-10000.1 : [fromChannel].[sequence]
  fromChainId      String
  fromChannelId    String
  toChainId        String? // as we may not know the to chain id yet during the creation of the packet
  toChannelId      String? // as we may not know the to channel id yet during the creation of the packet
  blockId          String
  txHash           String
  sequence         Int
  fromAddress      String
  currentState     String // SendPacket, RecvPacket, WriteAckPacket, Acknowledgement...
  timeoutTimestamp BigInt
  timestamp        BigInt
  fromChain        Chain    @relation("FromChainId", fields: [fromChainId], references: [id])
  toChain          Chain?   @relation("ToChainId", fields: [toChainId], references: [id])
  fromChannel      Channel  @relation("FromChannelId", fields: [fromChannelId], references: [id])
  toChannel        Channel? @relation("ToChannelId", fields: [toChannelId], references: [id])
  block            Block    @relation(fields: [blockId], references: [id])
  from             Address  @relation(fields: [fromAddress], references: [address])
  state            State[]

  @@index([fromChannelId], name: "fromChannelId")
  @@index([toChannelId], name: "toChannelId")
}

model State {
  id          String  @id // channel-10000.1.SendPacket : [channelId].[sequence].[state]
  packetId    String
  channelId   String
  chainId     String
  blockId     String
  type        String // SendPacket, RecvPacket, WriteAckPacket, Acknowledgement...
  timestamp   BigInt
  latency     Int
  fromAddress String
  portAddress String
  data        String
  txHash      String
  nonce       Int
  index       Int
  packet      Packet  @relation(fields: [packetId], references: [id])
  channel     Channel @relation(fields: [channelId], references: [id])
  block       Block   @relation(fields: [blockId], references: [id])
  chain       Chain   @relation(fields: [chainId], references: [id])
  from        Address @relation(fields: [fromAddress], references: [address])

  @@index([packetId], name: "packetId")
  @@index([channelId], name: "channelId")
}

model IndexerStatus {
  id        String   @id
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model RawContract {
  id               Int      @id @default(autoincrement())
  chain            String
  timestamp        BigInt
  blockNumber      Int
  from             String
  address          String
  data             String
  index            Int
  removed          Boolean
  transactionHash  String
  transactionIndex Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())

  @@index([transactionHash], name: "contractTransactionHash")
  @@index([address], name: "contractAddress")
}
